% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mcmc_samplers.R
\name{btf}
\alias{btf}
\title{MCMC Sampler for Bayesian Trend Filtering}
\usage{
btf(
  y,
  evol_error = "DHS",
  D = 2,
  useObsSV = FALSE,
  nsave = 1000,
  nburn = 1000,
  nskip = 4,
  mcmc_params = list("mu", "yhat", "evol_sigma_t2", "obs_sigma_t2", "dhs_phi",
    "dhs_mean"),
  computeDIC = TRUE,
  verbose = TRUE
)
}
\arguments{
\item{y}{the \code{T x 1} vector of time series observations}

\item{evol_error}{the evolution error distribution; must be one of
'DHS' (dynamic horseshoe prior), 'HS' (horseshoe prior), 'BL' (Bayesian lasso), or 'NIG' (normal-inverse-gamma prior)}

\item{D}{degree of differencing (D = 0, D = 1, or D = 2)}

\item{useObsSV}{logical; if TRUE, include a (normal) stochastic volatility model
for the observation error variance}

\item{nsave}{number of MCMC iterations to record}

\item{nburn}{number of MCMC iterations to discard (burin-in)}

\item{nskip}{number of MCMC iterations to skip between saving iterations,
i.e., save every (nskip + 1)th draw}

\item{mcmc_params}{named list of parameters for which we store the MCMC output;
must be one or more of:
\itemize{
\item "mu" (conditional mean)
\item "yhat" (posterior predictive distribution)
\item "evol_sigma_t2" (evolution error variance)
\item "obs_sigma_t2" (observation error variance)
\item "dhs_phi" (DHS AR(1) coefficient)
\item "dhs_mean" (DHS AR(1) unconditional mean)
}}

\item{computeDIC}{logical; if TRUE, compute the deviance information criterion \code{DIC}
and the effective number of parameters \code{p_d}}

\item{verbose}{logical; should R report extra information on progress?}
}
\value{
A named list of the \code{nsave} MCMC samples for the parameters named in \code{mcmc_params}
}
\description{
Run the MCMC for Bayesian trend filtering with a penalty on zeroth (D = 0),
first (D = 1), or second (D = 2) differences of the conditional expectation.
The penalty is determined by the prior on the evolution errors, which include:
\itemize{
\item the dynamic horseshoe prior ('DHS');
\item the static horseshoe prior ('HS');
\item the Bayesian lasso ('BL');
\item the normal stochastic volatility model ('SV');
\item the normal-inverse-gamma prior ('NIG').
}
In each case, the evolution error is a scale mixture of Gaussians.
Sampling is accomplished with a (parameter-expanded) Gibbs sampler,
mostly relying on a dynamic linear model representation.
}
\note{
The data \code{y} may contain NAs, which will be treated with a simple imputation scheme
via an additional Gibbs sampling step. In general, rescaling \code{y} to have unit standard
deviation is recommended to avoid numerical issues.
}
\examples{
\dontrun{
# Example 1: Bumps Data
simdata = simUnivariate(signalName = "bumps", T = 128, RSNR = 7, include_plot = TRUE)
y = simdata$y

out = btf(y)
plot_fitted(y, mu = colMeans(out$mu), postY = out$yhat, y_true = simdata$y_true)

# Example 2: Doppler Data; longer series, more noise
simdata = simUnivariate(signalName = "doppler", T = 500, RSNR = 5, include_plot = TRUE)
y = simdata$y

out = btf(y)
plot_fitted(y, mu = colMeans(out$mu), postY = out$yhat, y_true = simdata$y_true)

# And examine the AR(1) parameters for the log-volatility w/ traceplots:
plot(as.ts(out$dhs_phi)) # AR(1) coefficient
plot(as.ts(out$dhs_mean)) # Unconditional mean

# Example 3: Blocks data (locally constant)
simdata = simUnivariate(signalName = "blocks", T = 1000, RSNR = 3, include_plot = TRUE)
y = simdata$y

out = btf(y, D = 1) # try D = 1 to approximate the locally constant behavior
plot_fitted(y, mu = colMeans(out$mu), postY = out$yhat, y_true = simdata$y_true)
}

}
